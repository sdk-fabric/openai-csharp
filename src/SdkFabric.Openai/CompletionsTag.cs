/**
 * CompletionsTag automatically generated by SDKgen please do not edit this file manually
 * @see https://sdkgen.app
 */


using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using RestSharp;
using Sdkgen.Client;
using Sdkgen.Client.Exception;

namespace SdkFabric.Openai;

public class CompletionsTag : TagAbstract {
    public CompletionsTag(RestClient httpClient, Parser parser): base(httpClient, parser)
    {
    }


    /**
     * Creates a model response for the given chat conversation.
     */
    public async Task<CompletionResponse> Create(CompletionRequest payload)
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/v1/chat/completions", pathParams), Method.Post);
        this.Parser.Query(request, queryParams, queryStructNames);
        request.AddJsonBody(JsonSerializer.Serialize(payload));

        request.AddOrUpdateHeader("Content-Type", "application/json");

        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<CompletionResponse>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<Error>(response.Content);

            throw new ErrorException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * List stored Chat Completions. Only Chat Completions that have been stored with the store parameter set to true will be returned.
     */
    public async Task<CompletionCollection> GetAll(string after, int limit, string model, string order)
    {
        Dictionary<string, object> pathParams = new();

        Dictionary<string, object> queryParams = new();
        queryParams.Add("after", after);
        queryParams.Add("limit", limit);
        queryParams.Add("model", model);
        queryParams.Add("order", order);

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/v1/chat/completions", pathParams), Method.Get);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<CompletionCollection>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<Error>(response.Content);

            throw new ErrorException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }
    /**
     * Delete a stored chat completion. Only Chat Completions that have been created with the store parameter set to true can be deleted.
     */
    public async Task<CompletionDeleted> Delete(string completionId)
    {
        Dictionary<string, object> pathParams = new();
        pathParams.Add("completion_id", completionId);

        Dictionary<string, object> queryParams = new();

        List<string> queryStructNames = new();

        RestRequest request = new(this.Parser.Url("/v1/chat/completions/:completion_id", pathParams), Method.Delete);
        this.Parser.Query(request, queryParams, queryStructNames);


        RestResponse response = await this.HttpClient.ExecuteAsync(request);

        if (response.IsSuccessful)
        {
            var data = this.Parser.Parse<CompletionDeleted>(response.Content);

            return data;
        }

        var statusCode = (int) response.StatusCode;
        if (statusCode >= 0 && statusCode <= 999)
        {
            var data = this.Parser.Parse<Error>(response.Content);

            throw new ErrorException(data);
        }

        throw new UnknownStatusCodeException("The server returned an unknown status code: " + statusCode);
    }


}
